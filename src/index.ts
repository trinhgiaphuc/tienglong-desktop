import 'dotenv/config';
import { app, BrowserWindow, ipcMain, IpcRenderer, net } from 'electron';
// import isDev from 'electron-is-dev';
import { Word } from './typings';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare global {
  interface Window {
    electronAPI: {
      ipcRenderer: IpcRenderer;
    };
  }
}

const createWindow = (): void => {
  const mainWindow = new BrowserWindow({
    center: true,
    hasShadow: false,
    autoHideMenuBar: true,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  mainWindow.webContents.setWindowOpenHandler(({ url }) => {
    const { origin } = new URL(url);
    if (origin === 'https://tienglong-34e90.firebaseapp.com') {
      return { action: 'allow' };
    } else {
      return { action: 'deny' };
    }
  });

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // if (isDev) {
  mainWindow.webContents.openDevTools();
  // }

  let data: {
    todayWords: Word[];
  };

  const request = net.request(`${process.env.BASE_URL}/api/word/today-words`);
  request.on('response', (response) => {
    const bufferRes: Buffer[] = [];
    let length = 0;
    response.on('data', (chunk) => {
      bufferRes.push(chunk);
      length += chunk.length;
    });
    response.on('end', () => {
      data = JSON.parse(Buffer.concat(bufferRes, length).toString('utf8'));
    });
  });
  request.end();

  ipcMain.handleOnce('today-words', (e) => {
    return data;
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
